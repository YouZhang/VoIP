function LPpar = SetLPpar (Np, LPpar)
% Set any undefined LP analysis parameters
%
% LPpar.Win  - Window coefficients
%              File name, window vector, or window length. In the latter
%              case, the window will be a Hamming window. The window is
%              returned as a column vector; default Hamming window, length
%              240.
% LPpar.Rnn  - Relative noise correlation values (file name or vector)
%              Returned as a column vector; default [0; ...; 0]. For
%              instance, use Rnn=1e-4 (the rest of the vector will be set
%              to zeros) to apply white noise correction with an energy of
%              1e-4 times the energy of the signal.
% LPpar.LagWin - Lag window applied to speech + noise correlation.
%              This field contains a ile name, window vector, or bandwidth
%              expansion factor (for a Gaussian lag window with the given
%              normalized (1-sided) Hz (Gaussian lag window). For instance
%              LagWin = 60/8000 gives a double-sided 1-sigma bandwidth of
%              120 Hz. LagWin is returned as a column vector of the lag
%              window coefficients generated by the bandwidth expansion
%              factor. The default lag window is [1; ...; 1].
% LPpar.ECWin - Window applied to error filter coefficients
%              File name, window vector, or bandwidth expansion factor.
%              Returned as a column vector, default [1; ...; 1]. For
%              instance, ECWin=0.990 will give a 25 Hz expansion for
%              8 kHz samples.
%
% All vectors are column vectors. Any pre-defined vectors are reshaped to
% become column vectors.

% $Id: SetLPpar.m,v 1.5 2009/07/14 18:21:24 pkabal Exp $

if (nargin < 1)
    LPpar = [];
end

% Correlation analysis parameters
if (isfield (LPpar, 'Win'))
  if (ischar (LPpar.Win))
    LPpar.Win = load (LPpar.Win);
  elseif (length (LPpar.Win) == 1)
    LWin = LPpar.Win;
    LPpar.Win = hamming (LWin);
  end
else
  LWin = 240;
  LPpar.Win = hamming (LWin);
end
LPpar.Win = LPpar.Win(:);	% Column vector

% Post correlation analysis parameters
if (isfield (LPpar, 'Rnn'))
  if (ischar (LPpar.Rnn))
    LPpar.Rnn = load (LPpar.Rnn);
  end
else
  LPpar.Rnn = [];
end
NRnn = length (LPpar.Rnn);
LPpar.Rnn = [LPpar.Rnn(:); zeros(Np+1-NRnn,1)];

if (isfield (LPpar, 'LagWin'))
  if (ischar (LPpar.LagWin))
    LPpar.LagWin = load (LPpar.LagWin);
  elseif (length (LPpar.LagWin) == 1)
    BW = LPpar.LagWin;
    LPpar.LagWin = exp (-0.5*(2*pi * BW * (0:Np)).^2);
  end
else
  LPpar.LagWin = ones (Np+1, 1);
end
LPpar.LagWin = LPpar.LagWin(:);

% Post Levinson bandwidth expansion
if (isfield (LPpar, 'ECWin'))
  if (ischar (LPpar.ECWin))
    LPpar.ECWin = load (LPpar.ECWin);
  elseif (length (LPpar.ECWin) == 1)
    alpha = LPpar.ECWin;
    LPpar.ECWin = alpha.^(0:Np);
  end
else
 LPpar.ECWin = ones (Np+1, 1);
end
LPpar.ECWin = LPpar.ECWin(:);

return
